package storage

import (
	"context"
	"testing"

	"{{ cookiecutter.module_prefix }}{{ cookiecutter.slug }}/internal/repository"
	"{{ cookiecutter.module_prefix }}{{ cookiecutter.slug }}/internal/storage/sqlite"
	"github.com/stretchr/testify/assert"
)

func setupStorage() repository.Storage {
	s := sqlite.New(":memory:")
	return s
}

func TestNewDatabaseIsAccessible(t *testing.T) {
	s := setupStorage()
	err := s.Init(context.Background())
	assert.Nil(t, err)
	items, err := s.GetItems(
		context.Background(),
		[]repository.ItemType{repository.ItemType{{ cookiecutter.slug }}},
		repository.GlobalNamespace,
		repository.SubsetAll,
	)
	assert.Nil(t, err)
	assert.Equal(t, 0, len(items))
}

func TestCreateItem(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Category:  "bar",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	assert.NotEmpty(t, item.ID, "the id of the item is autogenerated and returned back")
	assert.NotEmpty(t, item.CreatedAt)
	assert.NotEmpty(t, item.ModifiedAt)
}

func TestGetItems(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	_, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Category:  "bar",
		Done:      false,
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	_, err = s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Category:  "bar",
		Done:      true,
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	items, err := s.GetItems(
		context.Background(),
		[]repository.ItemType{repository.ItemType{{ cookiecutter.slug }}},
		repository.GlobalNamespace,
		repository.SubsetIncomplete,
	)
	assert.Nil(t, err)
	assert.Equal(t, 1, len(items))
	items, err = s.GetItems(
		context.Background(),
		[]repository.ItemType{repository.ItemType{{ cookiecutter.slug }}},
		repository.GlobalNamespace,
		repository.SubsetAll,
	)
	assert.Nil(t, err)
	assert.Equal(t, 2, len(items))
}

func TestGetItem(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Category:  "bar",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	itemReloaded, err := s.GetItem(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.Equal(t, "foo", itemReloaded.Name)
}

func TestDeleteItem(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())

	err := s.DeleteItem(context.Background(), "this-id-doesnt-exist")
	assert.ErrorIs(t, repository.ErrNotFound, err)

	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Category:  "bar",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	itemReloaded, err := s.GetItem(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.NotNil(t, itemReloaded)
	err = s.DeleteItem(context.Background(), item.ID)
	assert.Nil(t, err)
	deletedItem, err := s.GetItem(context.Background(), item.ID)
	assert.ErrorIs(t, repository.ErrNotFound, err)
	assert.Equal(t, repository.Item{}, deletedItem)
}

func TestUpdateItem(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Category:  "bar",
		URL:       "http://example.com",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	item.Name = "buz"
	item.Category = "cuux"
	item.Currency = "RUB"
	err = s.UpdateItem(context.Background(), item.ID, item)
	assert.Nil(t, err)
	itemReloaded, err := s.GetItem(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.Equal(t, "buz", itemReloaded.Name)
	assert.Equal(t, "http://example.com", itemReloaded.URL)
}

func TestToggleItem(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Category:  "bar",
		URL:       "http://example.com",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	assert.False(t, item.Done)
	done, err := s.ToggleItem(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.True(t, done)
	itemReloaded, err := s.GetItem(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.True(t, itemReloaded.Done)
}

func TestGetNamespaces(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	_, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Namespace: "aboba",
	})
	namespaces, err := s.GetNamespaces(context.Background(), []repository.ItemType{repository.ItemType{{ cookiecutter.slug }}})
	assert.Nil(t, err)
	assert.Len(t, namespaces, 2)
	assert.Contains(t, namespaces, "global")
	assert.Contains(t, namespaces, "aboba")
}

func TestCreateDebtEntryWithoutMainItem(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	_, err := s.CreateDebtEntry(context.Background(), repository.DebtEntry{
		DebtID: "aboba",
		Amount: 1.0,
	})
	assert.NotNil(t, err)
}

func TestCreateDebtEntry(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	entry, err := s.CreateDebtEntry(context.Background(), repository.DebtEntry{
		DebtID:  item.ID,
		Comment: "hello",
		Amount:  1.0,
	})
	assert.Nil(t, err)
	assert.Equal(t, "hello", entry.Comment)
}

func TestGetDebtEntries(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())
	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemType{{ cookiecutter.slug }},
		Name:      "foo",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	s.CreateDebtEntry(context.Background(), repository.DebtEntry{
		DebtID:  item.ID,
		Comment: "hello",
		Amount:  1.0,
	})
	entries, err := s.GetDebtEntries(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.Len(t, entries, 1)
}

func TestDeleteDebtEntry(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())

	err := s.DeleteDebtEntry(context.Background(), "this-id-doesnt-exist")
	assert.ErrorIs(t, repository.ErrNotFound, err)

	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemTypeDebt,
		Name:      "foo",
		Category:  "bar",
		Currency:  "RUB",
		Namespace: repository.GlobalNamespace,
	})
	assert.Nil(t, err)
	entry, err := s.CreateDebtEntry(context.Background(), repository.DebtEntry{
		DebtID:  item.ID,
		Comment: "hello",
		Amount:  1.0,
	})
	assert.Nil(t, err)
	err = s.DeleteDebtEntry(context.Background(), entry.ID)
	assert.Nil(t, err)
	entries, err := s.GetDebtEntries(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.Len(t, entries, 0)
}

func TestIncr(t *testing.T) {
	s := setupStorage()
	s.Init(context.Background())

	item, err := s.CreateItem(context.Background(), repository.Item{
		Type:      repository.ItemTypeDebt,
		Name:      "foo",
		Category:  "bar",
		Namespace: repository.GlobalNamespace,
		Season:    0,
		Episode:   1,
	})
	assert.Nil(t, err)
	itemFromIncr, err := s.Incr(context.Background(), item.ID, "season", int64(10))
	assert.Nil(t, err)
	assert.Equal(t, int64(10), itemFromIncr.Season)
	itemReloaded, err := s.GetItem(context.Background(), item.ID)
	assert.Nil(t, err)
	assert.Equal(t, int64(10), itemReloaded.Season)
}
